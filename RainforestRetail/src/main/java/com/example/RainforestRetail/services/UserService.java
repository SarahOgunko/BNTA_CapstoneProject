package com.example.RainforestRetail.services;import com.example.RainforestRetail.models.Order;import com.example.RainforestRetail.models.ProductDTO;import com.example.RainforestRetail.models.ProductOrder;import com.example.RainforestRetail.models.User;import com.example.RainforestRetail.repositories.UserRepository;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import java.lang.reflect.Array;import java.util.ArrayList;import java.util.List;@Servicepublic class UserService {    @Autowired    UserRepository userRepository;    public User createNewUser(User user){        return  userRepository.save(user);    }    //Zsolt getUser method    // potential better solution for this 'schema'    // could have achieved same result with multiple DTOs    public User getUserOrders(long id){        User user = userRepository.findById(id).get();        List<Order> orders = user.getOrders(); // nested FOR loop, for each order cust has, create productDTO of each        for (Order order : orders ) {            ArrayList<ProductDTO> products = new ArrayList<>();            for (ProductOrder productOrder : order.getProductOrders()){                ProductDTO product = new ProductDTO(                        productOrder.getProduct().getName(),                        productOrder.getProduct().getProductType(),                        productOrder.getProduct().getPrice(),                        productOrder.getQuantity()                );                products.add(product);            }            order.setProducts(products); // set DTO to order        }        user.setOrders(orders); // set order to user        return user;    }//    if customerName === db customerName || customerEmail === user.email || customerAddress === db customerAddress//    // if userid exists then continue//    else, return null    public User findUserByEmail(String email){        User user = userRepository.findByEmail(email);        return user;    }}